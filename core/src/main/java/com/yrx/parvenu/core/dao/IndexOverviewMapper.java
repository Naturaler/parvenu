package com.yrx.parvenu.core.dao;

import com.yrx.parvenu.core.pojo.IndexOverview;
import com.yrx.parvenu.core.pojo.IndexOverviewExample;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.DeleteProvider;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.InsertProvider;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.SelectKey;
import org.apache.ibatis.annotations.SelectProvider;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.annotations.UpdateProvider;
import org.apache.ibatis.type.JdbcType;

public interface IndexOverviewMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table index_overview
     *
     * @mbg.generated Thu Feb 20 16:19:53 CST 2020
     */
    @SelectProvider(type=IndexOverviewSqlProvider.class, method="countByExample")
    long countByExample(IndexOverviewExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table index_overview
     *
     * @mbg.generated Thu Feb 20 16:19:53 CST 2020
     */
    @DeleteProvider(type=IndexOverviewSqlProvider.class, method="deleteByExample")
    int deleteByExample(IndexOverviewExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table index_overview
     *
     * @mbg.generated Thu Feb 20 16:19:53 CST 2020
     */
    @Delete({
        "delete from index_overview",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table index_overview
     *
     * @mbg.generated Thu Feb 20 16:19:53 CST 2020
     */
    @Insert({
        "insert into index_overview (index_id, index_code, ",
        "indx_sname, index_ename, ",
        "num, tclose, yld_1_mon, ",
        "base_point, base_date, ",
        "online_date, is_custom, ",
        "index_c_intro, index_e_intro, ",
        "index_c_fullname, index_e_fullname, ",
        "class_series, class_eseries, ",
        "class_region, class_eregion, ",
        "class_assets, class_eassets, ",
        "class_classify, class_eclassify, ",
        "class_currency, class_ecurrency, ",
        "class_hot, class_ehot, ",
        "insert_time, update_time)",
        "values (#{indexId,jdbcType=INTEGER}, #{indexCode,jdbcType=VARCHAR}, ",
        "#{indxSname,jdbcType=VARCHAR}, #{indexEname,jdbcType=VARCHAR}, ",
        "#{num,jdbcType=VARCHAR}, #{tclose,jdbcType=VARCHAR}, #{yld1Mon,jdbcType=VARCHAR}, ",
        "#{basePoint,jdbcType=VARCHAR}, #{baseDate,jdbcType=TIMESTAMP}, ",
        "#{onlineDate,jdbcType=TIMESTAMP}, #{isCustom,jdbcType=TINYINT}, ",
        "#{indexCIntro,jdbcType=VARCHAR}, #{indexEIntro,jdbcType=VARCHAR}, ",
        "#{indexCFullname,jdbcType=VARCHAR}, #{indexEFullname,jdbcType=VARCHAR}, ",
        "#{classSeries,jdbcType=VARCHAR}, #{classEseries,jdbcType=VARCHAR}, ",
        "#{classRegion,jdbcType=VARCHAR}, #{classEregion,jdbcType=VARCHAR}, ",
        "#{classAssets,jdbcType=VARCHAR}, #{classEassets,jdbcType=VARCHAR}, ",
        "#{classClassify,jdbcType=VARCHAR}, #{classEclassify,jdbcType=VARCHAR}, ",
        "#{classCurrency,jdbcType=VARCHAR}, #{classEcurrency,jdbcType=VARCHAR}, ",
        "#{classHot,jdbcType=VARCHAR}, #{classEhot,jdbcType=VARCHAR}, ",
        "#{insertTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})"
    })
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="id", before=false, resultType=Integer.class)
    int insert(IndexOverview record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table index_overview
     *
     * @mbg.generated Thu Feb 20 16:19:53 CST 2020
     */
    @InsertProvider(type=IndexOverviewSqlProvider.class, method="insertSelective")
    @SelectKey(statement="SELECT LAST_INSERT_ID()", keyProperty="id", before=false, resultType=Integer.class)
    int insertSelective(IndexOverview record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table index_overview
     *
     * @mbg.generated Thu Feb 20 16:19:53 CST 2020
     */
    @SelectProvider(type=IndexOverviewSqlProvider.class, method="selectByExample")
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="index_id", property="indexId", jdbcType=JdbcType.INTEGER),
        @Result(column="index_code", property="indexCode", jdbcType=JdbcType.VARCHAR),
        @Result(column="indx_sname", property="indxSname", jdbcType=JdbcType.VARCHAR),
        @Result(column="index_ename", property="indexEname", jdbcType=JdbcType.VARCHAR),
        @Result(column="num", property="num", jdbcType=JdbcType.VARCHAR),
        @Result(column="tclose", property="tclose", jdbcType=JdbcType.VARCHAR),
        @Result(column="yld_1_mon", property="yld1Mon", jdbcType=JdbcType.VARCHAR),
        @Result(column="base_point", property="basePoint", jdbcType=JdbcType.VARCHAR),
        @Result(column="base_date", property="baseDate", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="online_date", property="onlineDate", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="is_custom", property="isCustom", jdbcType=JdbcType.TINYINT),
        @Result(column="index_c_intro", property="indexCIntro", jdbcType=JdbcType.VARCHAR),
        @Result(column="index_e_intro", property="indexEIntro", jdbcType=JdbcType.VARCHAR),
        @Result(column="index_c_fullname", property="indexCFullname", jdbcType=JdbcType.VARCHAR),
        @Result(column="index_e_fullname", property="indexEFullname", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_series", property="classSeries", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_eseries", property="classEseries", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_region", property="classRegion", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_eregion", property="classEregion", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_assets", property="classAssets", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_eassets", property="classEassets", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_classify", property="classClassify", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_eclassify", property="classEclassify", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_currency", property="classCurrency", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_ecurrency", property="classEcurrency", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_hot", property="classHot", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_ehot", property="classEhot", jdbcType=JdbcType.VARCHAR),
        @Result(column="insert_time", property="insertTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP)
    })
    List<IndexOverview> selectByExample(IndexOverviewExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table index_overview
     *
     * @mbg.generated Thu Feb 20 16:19:53 CST 2020
     */
    @Select({
        "select",
        "id, index_id, index_code, indx_sname, index_ename, num, tclose, yld_1_mon, base_point, ",
        "base_date, online_date, is_custom, index_c_intro, index_e_intro, index_c_fullname, ",
        "index_e_fullname, class_series, class_eseries, class_region, class_eregion, ",
        "class_assets, class_eassets, class_classify, class_eclassify, class_currency, ",
        "class_ecurrency, class_hot, class_ehot, insert_time, update_time",
        "from index_overview",
        "where id = #{id,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="index_id", property="indexId", jdbcType=JdbcType.INTEGER),
        @Result(column="index_code", property="indexCode", jdbcType=JdbcType.VARCHAR),
        @Result(column="indx_sname", property="indxSname", jdbcType=JdbcType.VARCHAR),
        @Result(column="index_ename", property="indexEname", jdbcType=JdbcType.VARCHAR),
        @Result(column="num", property="num", jdbcType=JdbcType.VARCHAR),
        @Result(column="tclose", property="tclose", jdbcType=JdbcType.VARCHAR),
        @Result(column="yld_1_mon", property="yld1Mon", jdbcType=JdbcType.VARCHAR),
        @Result(column="base_point", property="basePoint", jdbcType=JdbcType.VARCHAR),
        @Result(column="base_date", property="baseDate", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="online_date", property="onlineDate", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="is_custom", property="isCustom", jdbcType=JdbcType.TINYINT),
        @Result(column="index_c_intro", property="indexCIntro", jdbcType=JdbcType.VARCHAR),
        @Result(column="index_e_intro", property="indexEIntro", jdbcType=JdbcType.VARCHAR),
        @Result(column="index_c_fullname", property="indexCFullname", jdbcType=JdbcType.VARCHAR),
        @Result(column="index_e_fullname", property="indexEFullname", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_series", property="classSeries", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_eseries", property="classEseries", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_region", property="classRegion", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_eregion", property="classEregion", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_assets", property="classAssets", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_eassets", property="classEassets", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_classify", property="classClassify", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_eclassify", property="classEclassify", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_currency", property="classCurrency", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_ecurrency", property="classEcurrency", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_hot", property="classHot", jdbcType=JdbcType.VARCHAR),
        @Result(column="class_ehot", property="classEhot", jdbcType=JdbcType.VARCHAR),
        @Result(column="insert_time", property="insertTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP)
    })
    IndexOverview selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table index_overview
     *
     * @mbg.generated Thu Feb 20 16:19:53 CST 2020
     */
    @UpdateProvider(type=IndexOverviewSqlProvider.class, method="updateByExampleSelective")
    int updateByExampleSelective(@Param("record") IndexOverview record, @Param("example") IndexOverviewExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table index_overview
     *
     * @mbg.generated Thu Feb 20 16:19:53 CST 2020
     */
    @UpdateProvider(type=IndexOverviewSqlProvider.class, method="updateByExample")
    int updateByExample(@Param("record") IndexOverview record, @Param("example") IndexOverviewExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table index_overview
     *
     * @mbg.generated Thu Feb 20 16:19:53 CST 2020
     */
    @UpdateProvider(type=IndexOverviewSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(IndexOverview record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table index_overview
     *
     * @mbg.generated Thu Feb 20 16:19:53 CST 2020
     */
    @Update({
        "update index_overview",
        "set index_id = #{indexId,jdbcType=INTEGER},",
          "index_code = #{indexCode,jdbcType=VARCHAR},",
          "indx_sname = #{indxSname,jdbcType=VARCHAR},",
          "index_ename = #{indexEname,jdbcType=VARCHAR},",
          "num = #{num,jdbcType=VARCHAR},",
          "tclose = #{tclose,jdbcType=VARCHAR},",
          "yld_1_mon = #{yld1Mon,jdbcType=VARCHAR},",
          "base_point = #{basePoint,jdbcType=VARCHAR},",
          "base_date = #{baseDate,jdbcType=TIMESTAMP},",
          "online_date = #{onlineDate,jdbcType=TIMESTAMP},",
          "is_custom = #{isCustom,jdbcType=TINYINT},",
          "index_c_intro = #{indexCIntro,jdbcType=VARCHAR},",
          "index_e_intro = #{indexEIntro,jdbcType=VARCHAR},",
          "index_c_fullname = #{indexCFullname,jdbcType=VARCHAR},",
          "index_e_fullname = #{indexEFullname,jdbcType=VARCHAR},",
          "class_series = #{classSeries,jdbcType=VARCHAR},",
          "class_eseries = #{classEseries,jdbcType=VARCHAR},",
          "class_region = #{classRegion,jdbcType=VARCHAR},",
          "class_eregion = #{classEregion,jdbcType=VARCHAR},",
          "class_assets = #{classAssets,jdbcType=VARCHAR},",
          "class_eassets = #{classEassets,jdbcType=VARCHAR},",
          "class_classify = #{classClassify,jdbcType=VARCHAR},",
          "class_eclassify = #{classEclassify,jdbcType=VARCHAR},",
          "class_currency = #{classCurrency,jdbcType=VARCHAR},",
          "class_ecurrency = #{classEcurrency,jdbcType=VARCHAR},",
          "class_hot = #{classHot,jdbcType=VARCHAR},",
          "class_ehot = #{classEhot,jdbcType=VARCHAR},",
          "insert_time = #{insertTime,jdbcType=TIMESTAMP},",
          "update_time = #{updateTime,jdbcType=TIMESTAMP}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(IndexOverview record);
}